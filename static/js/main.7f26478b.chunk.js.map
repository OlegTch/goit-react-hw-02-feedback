{"version":3,"sources":["components/feedback.module.css","components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","components/App.js","index.js"],"names":["module","exports","Statistics","onGood","onNeutral","onBad","onTotal","onPositivePercentage","className","styles","statisticsList","statisticsItem","statisticsText","statisticsValue","FeedbackOptions","options","onLeaveFeedback","feedbackList","map","option","feedbackItem","feedbackButton","type","onClick","Section","title","children","Notification","message","notificationItem","Feedback","state","good","neutral","bad","handleButton","label","setState","countTotalFeedback","Object","values","reduce","total","value","countPositiveFeedbackPercentage","positivePercentage","Math","floor","this","thumb","React","Component","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.7f26478b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumb\":\"feedback_thumb__3qTNm\",\"feedbackList\":\"feedback_feedbackList____ALS\",\"feedbackItem\":\"feedback_feedbackItem__1SuT-\",\"statisticsItem\":\"feedback_statisticsItem__1fnbi\",\"notificationItem\":\"feedback_notificationItem__21shs\",\"feedbackButton\":\"feedback_feedbackButton__2tbFi\",\"statisticsValue\":\"feedback_statisticsValue__15xws\"};","import PropTypes from \"prop-types\";\r\nimport styles from \"./feedback.module.css\";\r\n\r\nconst Statistics = ({\r\n  onGood,\r\n  onNeutral,\r\n  onBad,\r\n  onTotal,\r\n  onPositivePercentage,\r\n}) => (\r\n  <ul className={styles.statisticsList}>\r\n    <li className={styles.statisticsItem}>\r\n      <p className={styles.statisticsText}>\r\n        Good:\r\n        <span className={styles.statisticsValue}>{onGood}</span>\r\n      </p>\r\n    </li>\r\n    <li className={styles.statisticsItem}>\r\n      <p className={styles.statisticsText}>\r\n        Neutral:\r\n        <span className={styles.statisticsValue}>{onNeutral}</span>\r\n      </p>\r\n    </li>\r\n    <li className={styles.statisticsItem}>\r\n      <p className={styles.statisticsText}>\r\n        Bad:\r\n        <span className={styles.statisticsValue}>{onBad}</span>\r\n      </p>\r\n    </li>\r\n    <li className={styles.statisticsItem}>\r\n      <p className={styles.statisticsText}>\r\n        Total:\r\n        <span className={styles.statisticsValue}>{onTotal}</span>\r\n      </p>\r\n    </li>\r\n    <li className={styles.statisticsItem}>\r\n      <p className={styles.statisticsText}>\r\n        Positive feedback:\r\n        <span className={styles.statisticsValue}>{onPositivePercentage}</span>%\r\n      </p>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  onGood: PropTypes.number.isRequired,\r\n  onNeutral: PropTypes.number.isRequired,\r\n  onBad: PropTypes.number.isRequired,\r\n  onTotal: PropTypes.number.isRequired,\r\n  onPositivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from \"prop-types\";\r\nimport styles from \"./feedback.module.css\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <ul className={styles.feedbackList}>\r\n    {options.map((option) => (\r\n      <li key={option} className={styles.feedbackItem}>\r\n        <button\r\n          className={styles.feedbackButton}\r\n          type=\"button\"\r\n          onClick={() => onLeaveFeedback(option)}\r\n        >\r\n          {option}\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\nimport styles from \"./feedback.module.css\";\r\n\r\nconst Section = ({ title = \"\", children }) => (\r\n  <section>\r\n    {title && <h2 className={styles.title}>{title}</h2>}\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\nimport styles from \"./feedback.module.css\";\r\n\r\nconst Notification = ({ message = \"\" }) => (\r\n  <div className={styles.notificationItem}>{message}</div>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport Statistics from \"./Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport Section from \"./Section\";\r\nimport Notification from \"./Notification\";\r\n\r\nimport styles from \"./feedback.module.css\";\r\n\r\nclass Feedback extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleButton = (label) => {\r\n    this.setState((state) => {\r\n      return { [label]: state[label] + 1 };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    let values = Object.values(this.state);\r\n    return values.reduce((total, value) => total + value, 0);\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    let positivePercentage = 0;\r\n    const { good } = this.state;\r\n    if (this.countTotalFeedback() === 0) {\r\n      return positivePercentage;\r\n    }\r\n    return Math.floor(\r\n      (positivePercentage = (good * 100) / this.countTotalFeedback())\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const total = this.countTotalFeedback();\r\n    const positivePercentage = this.countPositiveFeedbackPercentage();\r\n    const { good, neutral, bad } = this.state;\r\n\r\n    return (\r\n      <div className={styles.thumb}>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={[\"good\", \"neutral\", \"bad\"]}\r\n            onLeaveFeedback={this.handleButton}\r\n          />\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n          {total > 0 ? (\r\n            <Statistics\r\n              onGood={good}\r\n              onNeutral={neutral}\r\n              onBad={bad}\r\n              onTotal={total}\r\n              onPositivePercentage={positivePercentage}\r\n            />\r\n          ) : (\r\n            <Notification message=\"There is no feedback\" />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import \"modern-normalize/modern-normalize.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}